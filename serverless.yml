service: checkin-service
frameworkVersion: '>=2'
configValidationMode: error

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: prod
  environment:
    AUTHORIZER_TOKEN: ${env:AUTHORIZER_TOKEN}
    ACCOUNT_ID: ${aws:accountId}
    TRIGGER_SCHEDULED_CHECKIN_RULE_PREFIX: ${self:custom.rule_prefixes.trigger_scheduled_checkin}
    SCHEDULED_CHECKIN_READY_QUEUE_URL: !Ref SqsScheduledCheckinReadyQueue
    SCHEDULED_CHECKIN_READY_QUEUE_ARN: !GetAtt SqsScheduledCheckinReadyQueue.Arn
  versionFunctions: false
  apiName: ${self:provider.stage}
  runtime: nodejs14.x
  profile: sw-tools
  memorySize: 128

  iam:
    role:
      statements:
        # ScheduleCheckin creates eventBridge rules
        - Effect: Allow
          Action:
            - events:*
          Resource: arn:aws:events:${self:provider.region}:${aws:accountId}:rule/${self:custom.rule_prefixes.trigger_scheduled_checkin}*
        - Effect: Allow
          Action:
            - events:ListRules
          Resource: arn:aws:events:${self:provider.region}:${aws:accountId}:rule/*
        - Effect: Allow
          Action:
            - sqs:*
          Resource: !GetAtt SqsScheduledCheckinReadyQueue.Arn

layers:
  chromeAwsLambda:
    package:
      artifact: layers/chrome_aws_lambda.zip

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  webpack:
    keepOutputDirectory: true
    webpackConfig: webpack.config.js
    includeModules:
      forceExclude:
        # included in chrome_aws_lambda layer
        - chrome-aws-lambda
        # included in chrome_aws_lambda layer
        - puppeteer-core
  rule_prefixes:
    trigger_scheduled_checkin: trigger-scheduled-checkin-

functions:
  Authorizer:
    handler: src/handlers/authorizer.handle
    description: Authorizes requests
    timeout: 6

  ScheduleCheckin:
    handler: src/handlers/schedule-checkin.handle
    description: Schedule a future checkin
    timeout: 30
    events:
      - http:
          method: put
          path: v1/checkin-service/checkin
          cors:
            origin: '*'
            headers:
              - Content-Type
              - token
          authorizer:
            name: Authorizer
            identitySource: method.request.header.token
            resultTtlInSeconds: 0
            type: request

  HandleScheduledCheckin:
    handler: src/handlers/handle-scheduled-checkin.handle
    description: Handle a scheduled checkin
    timeout: 600
    # puppeteer uses a lot of memory
    memorySize: 1600
    layers:
      - { Ref: ChromeAwsLambdaLambdaLayer }
    events:
      - sqs:
          arn: !GetAtt SqsScheduledCheckinReadyQueue.Arn
          batchSize: 1

  HandleListScheduledCheckinsForUser:
    handler: src/handlers/handle-list-scheduled-checkins-for-user.handle
    description: Handle a request to get scheduled checkins owned by a user id
    timeout: 30
    events:
      - http:
          method: get
          path: v1/checkin-service/checkins/:user_id
          cors:
            origin: '*'
            headers:
              - Content-Type
              - token
          authorizer:
            name: Authorizer
            identitySource: method.request.header.token
            resultTtlInSeconds: 0
            type: request

resources:
  Resources:
    SqsScheduledCheckinReadyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-scheduled-checkin-ready
        MessageRetentionPeriod: 1209600
        # 6x function timeout
        VisibilityTimeout: 9600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SqsScheduledCheckinReadyDlq.Arn
          # no retries for now
          maxReceiveCount: 1

    SqsScheduledCheckinReadyDlq:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-scheduled-checkin-ready-dlq
        MessageRetentionPeriod: 1209600

    # Allow EventBridge trigger_scheduled_checkin rules to send SQS messages to SqsScheduledCheckinReadyQueue
    SqsTriggerScheduledCheckinRuleToScheduledCheckinReadyQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt SqsScheduledCheckinReadyQueue.Arn
              Principal:
                Service:
                  - events.amazonaws.com
              Condition:
                ArnEquals:
                  aws:SourceArn: arn:aws:events:${self:provider.region}:${aws:accountId}:rule/${self:custom.rule_prefixes.trigger_scheduled_checkin}*
        Queues:
          - Ref: SqsScheduledCheckinReadyQueue
